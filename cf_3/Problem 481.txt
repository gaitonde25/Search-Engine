b'A bracket sequence is a string containing only characters "(" and ")". A regular bracket sequence (or, shortly, an RBS) is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters "1" and "+" between the original characters of the sequence. For example:'
b'  bracket sequences "()()" and "(())" are regular (the resulting expressions are: "(1)+(1)" and "((1+1)+1)");  bracket sequences ")(", "(" and ")" are not. '
b'Let\'s denote the concatenation of two strings xx and yy as x+yx+y. For example, "()()"\xc2\xa0++\xc2\xa0")("\xc2\xa0==\xc2\xa0"()())(".'
b'You are given nn bracket sequences s1,s2,\xe2\x80\xa6,sns1,s2,\xe2\x80\xa6,sn. You can rearrange them in any order (you can rearrange only the strings themselves, but not the characters in them).'
b'Your task is to rearrange the strings in such a way that the string s1+s2+\xe2\x8b\xaf+sns1+s2+\xe2\x8b\xaf+sn has as many non-empty prefixes that are RBS as possible.'
b'Input'
b'The first line contains a single integer nn (1\xe2\x89\xa4n\xe2\x89\xa4201\xe2\x89\xa4n\xe2\x89\xa420).'
b'Then nn lines follow, the ii-th of them contains sisi\xc2\xa0\xe2\x80\x94 a bracket sequence (a string consisting of characters "(" and/or ")". All sequences sisi are non-empty, their total length does not exceed 4\xe2\x8b\x851054\xe2\x8b\x85105.'
b'Output'
b'Print one integer\xc2\xa0\xe2\x80\x94 the maximum number of non-empty prefixes that are RBS for the string s1+s2+\xe2\x8b\xaf+sns1+s2+\xe2\x8b\xaf+sn, if the strings s1,s2,\xe2\x80\xa6,sns1,s2,\xe2\x80\xa6,sn can be rearranged arbitrarily.'
Tags
binary search, bitmasks, brute force, data structures, dp, *2400
