b'There is a chessboard of size nn by nn. The square in the ii-th row from top and jj-th column from the left is labelled (i,j)(i,j).'
b'Currently, Gregor has some pawns in the nn-th row. There are also enemy pawns in the 11-st row. On one turn, Gregor moves one of his pawns. A pawn can move one square up (from (i,j)(i,j) to (i\xe2\x88\x921,j)(i\xe2\x88\x921,j)) if there is no pawn in the destination square. Additionally, a pawn can move one square diagonally up (from (i,j)(i,j) to either (i\xe2\x88\x921,j\xe2\x88\x921)(i\xe2\x88\x921,j\xe2\x88\x921) or (i\xe2\x88\x921,j+1)(i\xe2\x88\x921,j+1)) if and only if there is an enemy pawn in that square. The enemy pawn is also removed.'
b'Gregor wants to know what is the maximum number of his pawns that can reach row 11?'
b"Note that only Gregor takes turns in this game, and the enemy pawns never move. Also, when Gregor's pawn reaches row 11, it is stuck and cannot make any further moves."
b'Input'
b'The first line of the input contains one integer tt (1\xe2\x89\xa4t\xe2\x89\xa42\xe2\x8b\x851041\xe2\x89\xa4t\xe2\x89\xa42\xe2\x8b\x85104) \xe2\x80\x94 the number of test cases. Then tt test cases follow.'
b'Each test case consists of three lines. The first line contains a single integer nn (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x851052\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the size of the chessboard.'
b'The second line consists of a string of binary digits of length nn, where a 11 in the ii-th position corresponds to an enemy pawn in the ii-th cell from the left, and 00 corresponds to an empty cell.'
b"The third line consists of a string of binary digits of length nn, where a 11 in the ii-th position corresponds to a Gregor's pawn in the ii-th cell from the left, and 00 corresponds to an empty cell."
b'It is guaranteed that the sum of nn across all test cases is less than 2\xe2\x8b\x851052\xe2\x8b\x85105.'
b'Output'
b"For each test case, print one integer: the maximum number of Gregor's pawns which can reach the 11-st row."
Tags
dfs and similar, dp, flows, graph matchings, graphs, greedy, implementation, *800
