b'Toad Ilya has a rooted binary tree with vertex 11 being the root. A tree is a connected graph without cycles. A tree is rooted if one vertex is selected and called the root. A vertex uu is a child of a vertex vv if uu and vv are connected by an edge and vv is closer to the root than uu. A leaf is a non-root vertex that has no children.'
b"In the tree Ilya has each vertex has at most two children, and each edge has some character written on it. The character can be a lowercase English letter or the question mark '?'."
b"Ilya will qq times update the tree a bit. Each update will replace exactly one character on some edge. After each update Ilya needs to find if the tree is anagrammable and if yes, find its anagramnity for each letter. Well, that's difficult to explain, but we'll try."
b'To start with, a string aa is an anagram of a string bb if it is possible to rearrange letters in aa (without changing the letters itself) so that it becomes bb. For example, the string "fortyfive" is an anagram of the string "overfifty", but the string "aabb" is not an anagram of the string "bbba".'
b'Consider a path from the root of the tree to a leaf. The characters on the edges on this path form a string, we say that this string is associated with this leaf. The tree is anagrammable if and only if it is possible to replace each question mark with a lowercase English letter so that for all pair of leaves the associated strings for these leaves are anagrams of each other.'
b'If the tree is anagrammable, then its anagramnity for the letter cc is the maximum possible number of letters cc in a string associated with some leaf in a valid replacement of all question marks.'
b'Please after each update find if the tree is anagrammable and if yes, find the \xe2\x88\x91f(c)\xe2\x8b\x85ind(c)\xe2\x88\x91f(c)\xe2\x8b\x85ind(c) for all letters cc, where f(c)f(c) is the anagramnity for the letter cc, and ind(x)ind(x) is the index of this letter in the alphabet (ind(ind("a")=1)=1, ind(ind("b")=2)=2, ..., ind(ind("z")=26)=26).'
b'Input'
b'The first line of input contains two integers nn and qq (2\xe2\x89\xa4n\xe2\x89\xa41500002\xe2\x89\xa4n\xe2\x89\xa4150000, 1\xe2\x89\xa4q\xe2\x89\xa41500001\xe2\x89\xa4q\xe2\x89\xa4150000)\xc2\xa0\xe2\x80\x94 the number of vertices in the tree and the number of queries.'
b"The next n\xe2\x88\x921n\xe2\x88\x921 lines describe the initial tree. The ii-th of them contains an integer pipi and a character cici (1\xe2\x89\xa4pi\xe2\x89\xa4i1\xe2\x89\xa4pi\xe2\x89\xa4i, cici is a lowercase English letter or the question mark '?') describing an edge between vertices pipi and i+1i+1 with character cici written on it."
b'The root of this tree is the vertex 11, and each vertex has at most two children.'
b"The next qq lines describe the queries. The ii-th of them contains two integers vv and cc (2\xe2\x89\xa4v\xe2\x89\xa4n2\xe2\x89\xa4v\xe2\x89\xa4n, cc is a lowercase English letter or the question mark '?'), meaning that updated character on the edge between pv\xe2\x88\x921pv\xe2\x88\x921 to vv is cc. The updated character can be the same as was written before."
b'Output'
b'Output qq lines. In the ii-th of them print "Fou" if the tree is not anagrammable after the first ii updates.'
b'Otherwise output "Shi" and the \xe2\x88\x91f(c)\xe2\x8b\x85ind(c)\xe2\x88\x91f(c)\xe2\x8b\x85ind(c) for all letters cc.'
Tags
dp, implementation, trees, *3000
