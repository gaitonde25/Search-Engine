b'You have got a shelf and want to put some books on it.'
b'You are given qq queries of three types:'
b'  L idid \xe2\x80\x94 put a book having index idid on the shelf to the left from the leftmost existing book;  R idid \xe2\x80\x94 put a book having index idid on the shelf to the right from the rightmost existing book;  ? idid \xe2\x80\x94 calculate the minimum number of books you need to pop from the left or from the right in such a way that the book with index idid will be leftmost or rightmost. '
b"You can assume that the first book you will put can have any position (it does not matter) and queries of type 33 are always valid (it is guaranteed that the book in each such query is already placed). You can also assume that you don't put the same book on the shelf twice, so idids don't repeat in queries of first two types."
b'Your problem is to answer all the queries of type 33 in order they appear in the input.'
b'Note that after answering the query of type 33 all the books remain on the shelf and the relative order of books does not change.'
b'If you are Python programmer, consider using PyPy instead of Python when you submit your code.'
b'Input'
b'The first line of the input contains one integer qq (1\xe2\x89\xa4q\xe2\x89\xa42\xe2\x8b\x851051\xe2\x89\xa4q\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the number of queries.'
b'Then qq lines follow. The ii-th line contains the ii-th query in format as in the problem statement. It is guaranteed that queries are always valid (for query type 33, it is guaranteed that the book in each such query is already placed, and for other types, it is guaranteed that the book was not placed before).'
b'It is guaranteed that there is at least one query of type 33 in the input.'
b'In each query the constraint 1\xe2\x89\xa4id\xe2\x89\xa42\xe2\x8b\x851051\xe2\x89\xa4id\xe2\x89\xa42\xe2\x8b\x85105 is met.'
b'Output'
b'Print answers to queries of the type 33 in order they appear in the input.'
Tags
implementation, *1400
