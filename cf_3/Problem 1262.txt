b'You have a knapsack with the capacity of WW. There are also nn items, the ii-th one has weight wiwi. '
b'You want to put some of these items into the knapsack in such a way that their total weight CC is at least half of its size, but (obviously) does not exceed it. Formally, CC should satisfy: \xe2\x8c\x88W2\xe2\x8c\x89\xe2\x89\xa4C\xe2\x89\xa4W\xe2\x8c\x88W2\xe2\x8c\x89\xe2\x89\xa4C\xe2\x89\xa4W. '
b'Output the list of items you will put into the knapsack or determine that fulfilling the conditions is impossible. '
b"If there are several possible lists of items satisfying the conditions, you can output any. Note that you don't have to maximize the sum of weights of items in the knapsack."
b'Input'
b'Each test contains multiple test cases. The first line contains the number of test cases tt (1\xe2\x89\xa4t\xe2\x89\xa41041\xe2\x89\xa4t\xe2\x89\xa4104). Description of the test cases follows.'
b'The first line of each test case contains integers nn and WW (1\xe2\x89\xa4n\xe2\x89\xa42000001\xe2\x89\xa4n\xe2\x89\xa4200000, 1\xe2\x89\xa4W\xe2\x89\xa410181\xe2\x89\xa4W\xe2\x89\xa41018). '
b'The second line of each test case contains nn integers w1,w2,\xe2\x80\xa6,wnw1,w2,\xe2\x80\xa6,wn (1\xe2\x89\xa4wi\xe2\x89\xa41091\xe2\x89\xa4wi\xe2\x89\xa4109)\xc2\xa0\xe2\x80\x94 weights of the items.'
b'The sum of nn over all test cases does not exceed 200000200000.'
b'Output'
b'For each test case, if there is no solution, print a single integer \xe2\x88\x921\xe2\x88\x921. '
b'If there exists a solution consisting of mm items, print mm in the first line of the output and mm integers j1j1, j2j2, ..., jmjm (1\xe2\x89\xa4ji\xe2\x89\xa4n1\xe2\x89\xa4ji\xe2\x89\xa4n, all jiji are distinct) in the second line of the output \xc2\xa0\xe2\x80\x94 indices of the items you would like to pack into the knapsack.'
b"If there are several possible lists of items satisfying the conditions, you can output any. Note that you don't have to maximize the sum of weights items in the knapsack."
Tags
constructive algorithms, greedy, sortings, *1300
