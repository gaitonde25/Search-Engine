b"The problem was inspired by Pied Piper story. After a challenge from Hooli's compression competitor Nucleus, Richard pulled an all-nighter to invent a new approach to compression: middle-out."
b'You are given two strings ss and tt of the same length nn. Their characters are numbered from 11 to nn from left to right (i.e. from the beginning to the end).'
b'In a single move you can do the following sequence of actions:'
b'  choose any valid index ii (1\xe2\x89\xa4i\xe2\x89\xa4n1\xe2\x89\xa4i\xe2\x89\xa4n),  move the ii-th character of ss from its position to the beginning of the string or move the ii-th character of ss from its position to the end of the string. '
b"Note, that the moves don't change the length of the string ss. You can apply a move only to the string ss."
b'For example, if s=s="test" in one move you can obtain:'
b'  if i=1i=1 and you move to the beginning, then the result is "test" (the string doesn\'t change),  if i=2i=2 and you move to the beginning, then the result is "etst",  if i=3i=3 and you move to the beginning, then the result is "stet",  if i=4i=4 and you move to the beginning, then the result is "ttes",  if i=1i=1 and you move to the end, then the result is "estt",  if i=2i=2 and you move to the end, then the result is "tste",  if i=3i=3 and you move to the end, then the result is "tets",  if i=4i=4 and you move to the end, then the result is "test" (the string doesn\'t change). '
b'You want to make the string ss equal to the string tt. What is the minimum number of moves you need? If it is impossible to transform ss to tt, print -1.'
b'Input'
b'The first line contains integer qq (1\xe2\x89\xa4q\xe2\x89\xa41001\xe2\x89\xa4q\xe2\x89\xa4100) \xe2\x80\x94 the number of independent test cases in the input.'
b'Each test case is given in three lines. The first line of a test case contains nn (1\xe2\x89\xa4n\xe2\x89\xa41001\xe2\x89\xa4n\xe2\x89\xa4100) \xe2\x80\x94 the length of the strings ss and tt. The second line contains ss, the third line contains tt. Both strings ss and tt have length nn and contain only lowercase Latin letters.'
b'There are no constraints on the sum of nn in the test (i.e. the input with q=100q=100 and all n=100n=100 is allowed).'
b'Output'
b'For every test print minimum possible number of moves, which are needed to transform ss into tt, or -1, if it is impossible to do.'
Tags
constructive algorithms, greedy, strings, *2200
