b'You are given two strings ss and tt both of length nn and both consisting of lowercase Latin letters.'
b'In one move, you can choose any length lenlen from 11 to nn and perform the following operation: '
b'  Choose any contiguous substring of the string ss of length lenlen and reverse it;  at the same time choose any contiguous substring of the string tt of length lenlen and reverse it as well. '
b'Note that during one move you reverse exactly one substring of the string ss and exactly one substring of the string tt.'
b'Also note that borders of substrings you reverse in ss and in tt can be different, the only restriction is that you reverse the substrings of equal length. For example, if len=3len=3 and n=5n=5, you can reverse s[1\xe2\x80\xa63]s[1\xe2\x80\xa63] and t[3\xe2\x80\xa65]t[3\xe2\x80\xa65], s[2\xe2\x80\xa64]s[2\xe2\x80\xa64] and t[2\xe2\x80\xa64]t[2\xe2\x80\xa64], but not s[1\xe2\x80\xa63]s[1\xe2\x80\xa63] and t[1\xe2\x80\xa62]t[1\xe2\x80\xa62].'
b'Your task is to say if it is possible to make strings ss and tt equal after some (possibly, empty) sequence of moves.'
b'You have to answer qq independent test cases.'
b'Input'
b'The first line of the input contains one integer qq (1\xe2\x89\xa4q\xe2\x89\xa41041\xe2\x89\xa4q\xe2\x89\xa4104) \xe2\x80\x94 the number of test cases. Then qq test cases follow.'
b'The first line of the test case contains one integer nn (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x851051\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the length of ss and tt.'
b'The second line of the test case contains one string ss consisting of nn lowercase Latin letters.'
b'The third line of the test case contains one string tt consisting of nn lowercase Latin letters.'
b'It is guaranteed that the sum of nn over all test cases does not exceed 2\xe2\x8b\x851052\xe2\x8b\x85105 (\xe2\x88\x91n\xe2\x89\xa42\xe2\x8b\x85105\xe2\x88\x91n\xe2\x89\xa42\xe2\x8b\x85105).'
b'Output'
b'For each test case, print the answer on it \xe2\x80\x94 "YES" (without quotes) if it is possible to make strings ss and tt equal after some (possibly, empty) sequence of moves and "NO" otherwise.'
Tags
constructive algorithms, sortings, strings, *2000
