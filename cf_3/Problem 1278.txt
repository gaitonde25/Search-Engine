b'We start with a permutation a1,a2,\xe2\x80\xa6,ana1,a2,\xe2\x80\xa6,an and with an empty array bb. We apply the following operation kk times.'
b'On the ii-th iteration, we select an index titi (1\xe2\x89\xa4ti\xe2\x89\xa4n\xe2\x88\x92i+11\xe2\x89\xa4ti\xe2\x89\xa4n\xe2\x88\x92i+1), remove atiati from the array, and append one of the numbers ati\xe2\x88\x921ati\xe2\x88\x921 or ati+1ati+1 (if ti\xe2\x88\x921ti\xe2\x88\x921 or ti+1ti+1 are within the array bounds) to the right end of the array bb. Then we move elements ati+1,\xe2\x80\xa6,anati+1,\xe2\x80\xa6,an to the left in order to fill in the empty space.'
b'You are given the initial permutation a1,a2,\xe2\x80\xa6,ana1,a2,\xe2\x80\xa6,an and the resulting array b1,b2,\xe2\x80\xa6,bkb1,b2,\xe2\x80\xa6,bk. All elements of an array bb are distinct. Calculate the number of possible sequences of indices t1,t2,\xe2\x80\xa6,tkt1,t2,\xe2\x80\xa6,tk modulo 998244353998244353.'
b'Input'
b'Each test contains multiple test cases. The first line contains an integer tt (1\xe2\x89\xa4t\xe2\x89\xa41000001\xe2\x89\xa4t\xe2\x89\xa4100000), denoting the number of test cases, followed by a description of the test cases.'
b'The first line of each test case contains two integers n,kn,k (1\xe2\x89\xa4k<n\xe2\x89\xa42000001\xe2\x89\xa4k<n\xe2\x89\xa4200000): sizes of arrays aa and bb.'
b'The second line of each test case contains nn integers a1,a2,\xe2\x80\xa6,ana1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n1\xe2\x89\xa4ai\xe2\x89\xa4n): elements of aa. All elements of aa are distinct.'
b'The third line of each test case contains kk integers b1,b2,\xe2\x80\xa6,bkb1,b2,\xe2\x80\xa6,bk (1\xe2\x89\xa4bi\xe2\x89\xa4n1\xe2\x89\xa4bi\xe2\x89\xa4n): elements of bb. All elements of bb are distinct.'
b'The sum of all nn among all test cases is guaranteed to not exceed 200000200000.'
b'Output'
b'For each test case print one integer: the number of possible sequences modulo 998244353998244353.'
Tags
combinatorics, data structures, dsu, greedy, implementation, *1800
