b"You are given a bracket sequence ss of length nn, where nn is even (divisible by two). The string ss consists of n2n2 opening brackets '(' and n2n2 closing brackets ')'."
b'In one move, you can choose exactly one bracket and move it to the beginning of the string or to the end of the string (i.e. you choose some index ii, remove the ii-th character of ss and insert it before or after all remaining characters of ss).'
b'Your task is to find the minimum number of moves required to obtain regular bracket sequence from ss. It can be proved that the answer always exists under the given constraints.'
b'Recall what the regular bracket sequence is:'
b'  "()" is regular bracket sequence;  if ss is regular bracket sequence then "(" + ss + ")" is regular bracket sequence;  if ss and tt are regular bracket sequences then ss + tt is regular bracket sequence. '
b'For example, "()()", "(())()", "(())" and "()" are regular bracket sequences, but ")(", "()(" and ")))" are not.'
b'You have to answer tt independent test cases.'
b'Input'
b'The first line of the input contains one integer tt (1\xe2\x89\xa4t\xe2\x89\xa420001\xe2\x89\xa4t\xe2\x89\xa42000) \xe2\x80\x94 the number of test cases. Then tt test cases follow.'
b'The first line of the test case contains one integer nn (2\xe2\x89\xa4n\xe2\x89\xa4502\xe2\x89\xa4n\xe2\x89\xa450) \xe2\x80\x94 the length of ss. It is guaranteed that nn is even. The second line of the test case containg the string ss consisting of n2n2 opening and n2n2 closing brackets.'
b'Output'
b'For each test case, print the answer \xe2\x80\x94 the minimum number of moves required to obtain regular bracket sequence from ss. It can be proved that the answer always exists under the given constraints.'
Tags
greedy, strings, *1000
