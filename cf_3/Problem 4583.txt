b'Nikita has a stack. A stack in this problem is a data structure that supports two operations. Operation push(x) puts an integer x on the top of the stack, and operation pop() deletes the top integer from the stack, i.\xc2\xa0e. the last added. If the stack is empty, then the operation pop() does nothing.'
b'Nikita made m operations with the stack but forgot them. Now Nikita wants to remember them. He remembers them one by one, on the i-th step he remembers an operation he made pi-th. In other words, he remembers the operations in order of some permutation p1,\xe2\x80\x89p2,\xe2\x80\x89...,\xe2\x80\x89pm. After each step Nikita wants to know what is the integer on the top of the stack after performing the operations he have already remembered, in the corresponding order. Help him!'
b'Input'
b'The first line contains the integer m (1\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89m\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89105)\xc2\xa0\xe2\x80\x94 the number of operations Nikita made.'
b'The next m lines contain the operations Nikita remembers. The i-th line starts with two integers pi and ti (1\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89pi\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89m, ti\xe2\x80\x89=\xe2\x80\x890 or ti\xe2\x80\x89=\xe2\x80\x891)\xc2\xa0\xe2\x80\x94 the index of operation he remembers on the step i, and the type of the operation. ti equals 0, if the operation is pop(), and 1, is the operation is push(x). If the operation is push(x), the line also contains the integer xi (1\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89xi\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89106)\xc2\xa0\xe2\x80\x94 the integer added to the stack.'
b'It is guaranteed that each integer from 1 to m is present exactly once among integers pi.'
b'Output'
b'Print m integers. The integer i should equal the number on the top of the stack after performing all the operations Nikita remembered on the steps from 1 to i. If the stack is empty after performing all these operations, print -1.'
Tags
data structures, *2200
