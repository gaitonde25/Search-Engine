b"A sequence a=[a1,a2,\xe2\x80\xa6,al]a=[a1,a2,\xe2\x80\xa6,al] of length ll has an ascent if there exists a pair of indices (i,j)(i,j) such that 1\xe2\x89\xa4i<j\xe2\x89\xa4l1\xe2\x89\xa4i<j\xe2\x89\xa4l and ai<ajai<aj. For example, the sequence [0,2,0,2,0][0,2,0,2,0] has an ascent because of the pair (1,4)(1,4), but the sequence [4,3,3,3,1][4,3,3,3,1] doesn't have an ascent."
b"Let's call a concatenation of sequences pp and qq the sequence that is obtained by writing down sequences pp and qq one right after another without changing the order. For example, the concatenation of the [0,2,0,2,0][0,2,0,2,0] and [4,3,3,3,1][4,3,3,3,1] is the sequence [0,2,0,2,0,4,3,3,3,1][0,2,0,2,0,4,3,3,3,1]. The concatenation of sequences pp and qq is denoted as p+qp+q."
b'Gyeonggeun thinks that sequences with ascents bring luck. Therefore, he wants to make many such sequences for the new year. Gyeonggeun has nn sequences s1,s2,\xe2\x80\xa6,sns1,s2,\xe2\x80\xa6,sn which may have different lengths. '
b'Gyeonggeun will consider all n2n2 pairs of sequences sxsx and sysy (1\xe2\x89\xa4x,y\xe2\x89\xa4n1\xe2\x89\xa4x,y\xe2\x89\xa4n), and will check if its concatenation sx+sysx+sy has an ascent. Note that he may select the same sequence twice, and the order of selection matters.'
b'Please count the number of pairs (x,yx,y) of sequences s1,s2,\xe2\x80\xa6,sns1,s2,\xe2\x80\xa6,sn whose concatenation sx+sysx+sy contains an ascent.'
b'Input'
b'The first line contains the number nn (1\xe2\x89\xa4n\xe2\x89\xa41000001\xe2\x89\xa4n\xe2\x89\xa4100000) denoting the number of sequences.'
b'The next nn lines contain the number lili (1\xe2\x89\xa4li1\xe2\x89\xa4li) denoting the length of sisi, followed by lili integers si,1,si,2,\xe2\x80\xa6,si,lisi,1,si,2,\xe2\x80\xa6,si,li (0\xe2\x89\xa4si,j\xe2\x89\xa41060\xe2\x89\xa4si,j\xe2\x89\xa4106) denoting the sequence sisi. '
b'It is guaranteed that the sum of all lili does not exceed 100000100000.'
b'Output'
b'Print a single integer, the number of pairs of sequences whose concatenation has an ascent.'
Tags
binary search, combinatorics, data structures, dp, implementation, sortings, *1400
