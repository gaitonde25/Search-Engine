b"\xe2\x80\x94 Willem...\xe2\x80\x94 What's the matter?\xe2\x80\x94 It seems that there's something wrong with Seniorious...\xe2\x80\x94 I'll have a look..."
b''
b'Seniorious is made by linking special talismans in particular order.'
b'After over 500 years, the carillon is now in bad condition, so Willem decides to examine it thoroughly.'
b'Seniorious has n pieces of talisman. Willem puts them in a line, the i-th of which is an integer ai.'
b'In order to maintain it, Willem needs to perform m operations.'
b'There are four types of operations:'
b" 1 l r x: For each i such that l\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89i\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89r, assign ai\xe2\x80\x89+\xe2\x80\x89x to ai. 2 l r x: For each i such that l\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89i\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89r, assign x to ai. 3 l r x: Print the x-th smallest number in the index range [l,\xe2\x80\x89r], i.e. the element at the x-th position if all the elements ai such that l\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89i\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89r are taken and sorted into an array of non-decreasing integers. It's guaranteed that 1\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89x\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89r\xe2\x80\x89-\xe2\x80\x89l\xe2\x80\x89+\xe2\x80\x891. 4 l r x y: Print the sum of the x-th power of ai such that l\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89i\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89r, modulo y, i.e. ."
b'Input'
b'The only line contains four integers n,\xe2\x80\x89m,\xe2\x80\x89seed,\xe2\x80\x89vmax (1\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89n,\xe2\x80\x89m\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89105,\xe2\x80\x890\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89seed\xe2\x80\x89<\xe2\x80\x89109\xe2\x80\x89+\xe2\x80\x897,\xe2\x80\x891\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89vmax\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89109).'
b'The initial values and operations are generated using following pseudo code:'
b'def rnd():    ret = seed    seed = (seed * 7 + 13) mod 1000000007    return retfor i = 1 to n:    a[i] = (rnd() mod vmax) + 1for i = 1 to m:    op = (rnd() mod 4) + 1    l = (rnd() mod n) + 1    r = (rnd() mod n) + 1    if (l > r):          swap(l, r)    if (op == 3):        x = (rnd() mod (r - l + 1)) + 1    else:        x = (rnd() mod vmax) + 1    if (op == 4):        y = (rnd() mod vmax) + 1'
b'Here op is the type of the operation mentioned in the legend.'
b'Output'
b'For each operation of types 3 or 4, output a line containing the answer.'
Tags
data structures, probabilities, *2600
