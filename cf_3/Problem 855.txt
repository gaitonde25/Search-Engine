b'There are nn robots driving along an OX axis. There are also two walls: one is at coordinate 00 and one is at coordinate mm.'
b'The ii-th robot starts at an integer coordinate xi\xc2\xa0(0<xi<m)xi\xc2\xa0(0<xi<m) and moves either left (towards the 00) or right with the speed of 11 unit per second. No two robots start at the same coordinate.'
b'Whenever a robot reaches a wall, it turns around instantly and continues his ride in the opposite direction with the same speed.'
b"Whenever several robots meet at the same integer coordinate, they collide and explode into dust. Once a robot has exploded, it doesn't collide with any other robot. Note that if several robots meet at a non-integer coordinate, nothing happens."
b'For each robot find out if it ever explodes and print the time of explosion if it happens and \xe2\x88\x921\xe2\x88\x921 otherwise.'
b'Input'
b'The first line contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa410001\xe2\x89\xa4t\xe2\x89\xa41000)\xc2\xa0\xe2\x80\x94 the number of testcases.'
b'Then the descriptions of tt testcases follow.'
b'The first line of each testcase contains two integers nn and mm (1\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x851051\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x85105; 2\xe2\x89\xa4m\xe2\x89\xa41082\xe2\x89\xa4m\xe2\x89\xa4108)\xc2\xa0\xe2\x80\x94 the number of robots and the coordinate of the right wall.'
b'The second line of each testcase contains nn integers x1,x2,\xe2\x80\xa6,xnx1,x2,\xe2\x80\xa6,xn (0<xi<m0<xi<m)\xc2\xa0\xe2\x80\x94 the starting coordinates of the robots.'
b"The third line of each testcase contains nn space-separated characters 'L' or 'R'\xc2\xa0\xe2\x80\x94 the starting directions of the robots ('L' stands for left and 'R' stands for right)."
b'All coordinates xixi in the testcase are distinct.'
b"The sum of nn over all testcases doesn't exceed 3\xe2\x8b\x851053\xe2\x8b\x85105."
b'Output'
b'For each testcase print nn integers\xc2\xa0\xe2\x80\x94 for the ii-th robot output the time it explodes at if it does and \xe2\x88\x921\xe2\x88\x921 otherwise.'
Tags
data structures, greedy, implementation, sortings, *2000
