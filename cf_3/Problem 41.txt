b'You are given three arrays aa, bb and cc. Initially, array aa consists of nn elements, arrays bb and cc are empty.'
b'You are performing the following algorithm that consists of two steps: '
b'  Step 11: while aa is not empty, you take the last element from aa and move it in the middle of array bb. If bb currently has odd length, you can choose: place the element from aa to the left or to the right of the middle element of bb. As a result, aa becomes empty and bb consists of nn elements.  Step 22: while bb is not empty, you take the middle element from bb and move it to the end of array cc. If bb currently has even length, you can choose which of two middle elements to take. As a result, bb becomes empty and cc now consists of nn elements. '
b' Refer to the Note section for examples.'
b'Can you make array cc sorted in non-decreasing order?'
b'Input'
b'The first line contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa42\xe2\x8b\x851041\xe2\x89\xa4t\xe2\x89\xa42\xe2\x8b\x85104)\xc2\xa0\xe2\x80\x94 the number of test cases. Next tt cases follow.'
b'The first line of each test case contains the single integer nn (1\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x851051\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105)\xc2\xa0\xe2\x80\x94 the length of array aa.'
b'The second line of each test case contains nn integers a1,a2,\xe2\x80\xa6,ana1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa41061\xe2\x89\xa4ai\xe2\x89\xa4106)\xc2\xa0\xe2\x80\x94 the array aa itself.'
b"It's guaranteed that the sum of nn doesn't exceed 2\xe2\x8b\x851052\xe2\x8b\x85105."
b'Output'
b'For each test, print YES (case-insensitive), if you can make array cc sorted in non-decreasing order. Otherwise, print NO (case-insensitive).'
Tags
constructive algorithms, implementation, sortings, *1200
