b'You are fed up with your messy room, so you decided to clean it up.'
b"Your room is a bracket sequence s=s1s2\xe2\x80\xa6sns=s1s2\xe2\x80\xa6sn of length nn. Each character of this string is either an opening bracket '(' or a closing bracket ')'."
b'In one operation you can choose any consecutive substring of ss and reverse it. In other words, you can choose any substring s[l\xe2\x80\xa6r]=sl,sl+1,\xe2\x80\xa6,srs[l\xe2\x80\xa6r]=sl,sl+1,\xe2\x80\xa6,sr and change the order of elements in it into sr,sr\xe2\x88\x921,\xe2\x80\xa6,slsr,sr\xe2\x88\x921,\xe2\x80\xa6,sl.'
b'For example, if you will decide to reverse substring s[2\xe2\x80\xa64]s[2\xe2\x80\xa64] of string s=s="((()))" it will be equal to s=s="()(())".'
b'A regular (aka balanced) bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \'1\' and \'+\' between the original characters of the sequence. For example, bracket sequences "()()", "(())" are regular (the resulting expressions are: "(1)+(1)", "((1+1)+1)"), and ")(" and "(" are not.'
b'A prefix of a string ss is a substring that starts at position 11. For example, for s=s="(())()" there are 66 prefixes: "(", "((", "(()", "(())", "(())(" and "(())()".'
b'In your opinion, a neat and clean room ss is a bracket sequence that:'
b'  the whole string ss is a regular bracket sequence;  and there are exactly kk prefixes of this sequence which are regular (including whole ss itself). '
b'For example, if k=2k=2, then "(())()" is a neat and clean room.'
b'You want to use at most nn operations to make your room neat and clean. Operations are applied one after another sequentially.'
b'It is guaranteed that the answer exists. Note that you do not need to minimize the number of operations: find any way to achieve the desired configuration in nn or less operations.'
b'Input'
b'The first line contains integer number tt (1\xe2\x89\xa4t\xe2\x89\xa41001\xe2\x89\xa4t\xe2\x89\xa4100)\xc2\xa0\xe2\x80\x94 the number of test cases in the input. Then tt test cases follow.'
b'The first line of a test case contains two integers nn and kk (1\xe2\x89\xa4k\xe2\x89\xa4n2,2\xe2\x89\xa4n\xe2\x89\xa420001\xe2\x89\xa4k\xe2\x89\xa4n2,2\xe2\x89\xa4n\xe2\x89\xa42000, nn is even)\xc2\xa0\xe2\x80\x94 length of ss and required number of regular prefixes.'
b"The second line of a test case contains ss of length nn\xc2\xa0\xe2\x80\x94 the given bracket sequence. It contains only '(' and ')'."
b"It is guaranteed that there are exactly n2n2 characters '(' and exactly n2n2 characters ')' in the given string."
b"The sum of all values nn over all the test cases in the input doesn't exceed 20002000."
b'Output'
b'For each test case print an answer.'
b'In the first line print integer mm (0\xe2\x89\xa4m\xe2\x89\xa4n0\xe2\x89\xa4m\xe2\x89\xa4n)\xc2\xa0\xe2\x80\x94 the number of operations. You do not need to minimize mm, any value is suitable.'
b'In the following mm lines print description of the operations, each line should contain two integers l,rl,r (1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4n1\xe2\x89\xa4l\xe2\x89\xa4r\xe2\x89\xa4n), representing single reverse operation of s[l\xe2\x80\xa6r]=slsl+1\xe2\x80\xa6srs[l\xe2\x80\xa6r]=slsl+1\xe2\x80\xa6sr. Operations are applied one after another sequentially.'
b'The final ss after all operations should be a regular, also it should be exactly kk prefixes (including ss) which are regular.'
b'It is guaranteed that the answer exists. If there are several possible answers you can print any.'
Tags
constructive algorithms, *1700
