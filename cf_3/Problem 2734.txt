b'Polycarp has to solve exactly nn problems to improve his programming skill before an important programming competition. But this competition will be held very soon, most precisely, it will start in kk days. It means that Polycarp has exactly kk days for training!'
b"Polycarp doesn't want to procrastinate, so he wants to solve at least one problem during each of kk days. He also doesn't want to overwork, so if he solves xx problems during some day, he should solve no more than 2x2x problems during the next day. And, at last, he wants to improve his skill, so if he solves xx problems during some day, he should solve at least x+1x+1 problem during the next day."
b'More formally: let [a1,a2,\xe2\x80\xa6,ak][a1,a2,\xe2\x80\xa6,ak] be the array of numbers of problems solved by Polycarp. The ii-th element of this array is the number of problems Polycarp solves during the ii-th day of his training. Then the following conditions must be satisfied: '
b'  sum of all aiai for ii from 11 to kk should be nn;  aiai should be greater than zero for each ii from 11 to kk;  the condition ai<ai+1\xe2\x89\xa42aiai<ai+1\xe2\x89\xa42ai should be satisfied for each ii from 11 to k\xe2\x88\x921k\xe2\x88\x921. '
b'Your problem is to find any array aa of length kk satisfying the conditions above or say that it is impossible to do it.'
b'Input'
b'The first line of the input contains two integers nn and kk (1\xe2\x89\xa4n\xe2\x89\xa4109,1\xe2\x89\xa4k\xe2\x89\xa41051\xe2\x89\xa4n\xe2\x89\xa4109,1\xe2\x89\xa4k\xe2\x89\xa4105) \xe2\x80\x94 the number of problems Polycarp wants to solve and the number of days Polycarp wants to train.'
b'Output'
b'If it is impossible to find any array aa of length kk satisfying Polycarp\'s rules of training, print "NO" in the first line.'
b'Otherwise print "YES" in the first line, then print kk integers a1,a2,\xe2\x80\xa6,aka1,a2,\xe2\x80\xa6,ak in the second line, where aiai should be the number of problems Polycarp should solve during the ii-th day. If there are multiple answers, you can print any.'
Tags
constructive algorithms, greedy, math, *1900
