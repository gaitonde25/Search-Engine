b'Mitya has a rooted tree with nn vertices indexed from 11 to nn, where the root has index 11. Each vertex vv initially had an integer number av\xe2\x89\xa50av\xe2\x89\xa50 written on it. For every vertex vv Mitya has computed svsv: the sum of all values written on the vertices on the path from vertex vv to the root, as well as hvhv\xc2\xa0\xe2\x80\x94 the depth of vertex vv, which denotes the number of vertices on the path from vertex vv to the root. Clearly, s1=a1s1=a1 and h1=1h1=1.'
b"Then Mitya erased all numbers avav, and by accident he also erased all values svsv for vertices with even depth (vertices with even hvhv). Your task is to restore the values avav for every vertex, or determine that Mitya made a mistake. In case there are multiple ways to restore the values, you're required to find one which minimizes the total sum of values avav for all vertices in the tree."
b'Input'
b'The first line contains one integer nn\xc2\xa0\xe2\x80\x94 the number of vertices in the tree (2\xe2\x89\xa4n\xe2\x89\xa41052\xe2\x89\xa4n\xe2\x89\xa4105). The following line contains integers p2p2, p3p3, ... pnpn, where pipi stands for the parent of vertex with index ii in the tree (1\xe2\x89\xa4pi<i1\xe2\x89\xa4pi<i). The last line contains integer values s1s1, s2s2, ..., snsn (\xe2\x88\x921\xe2\x89\xa4sv\xe2\x89\xa4109\xe2\x88\x921\xe2\x89\xa4sv\xe2\x89\xa4109), where erased values are replaced by \xe2\x88\x921\xe2\x88\x921.'
b'Output'
b'Output one integer\xc2\xa0\xe2\x80\x94 the minimum total sum of all values avav in the original tree, or \xe2\x88\x921\xe2\x88\x921 if such tree does not exist.'
Tags
constructive algorithms, dfs and similar, greedy, trees, *1600
