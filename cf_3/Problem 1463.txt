b'A permutation of length nn is an array consisting of nn distinct integers from 11 to nn in arbitrary order. For example, [2,3,1,5,4][2,3,1,5,4] is a permutation, but [1,2,2][1,2,2] is not a permutation (22 appears twice in the array) and [1,3,4][1,3,4] is also not a permutation (n=3n=3 but there is 44 in the array).'
b'Let pp be any permutation of length nn. We define the fingerprint F(p)F(p) of pp as the sorted array of sums of adjacent elements in pp. More formally,'
b'F(p)=sort([p1+p2,p2+p3,\xe2\x80\xa6,pn\xe2\x88\x921+pn]).F(p)=sort([p1+p2,p2+p3,\xe2\x80\xa6,pn\xe2\x88\x921+pn]).'
b'For example, if n=4n=4 and p=[1,4,2,3],p=[1,4,2,3], then the fingerprint is given by F(p)=sort([1+4,4+2,2+3])=sort([5,6,5])=[5,5,6]F(p)=sort([1+4,4+2,2+3])=sort([5,6,5])=[5,5,6].'
b'You are given a permutation pp of length nn. Your task is to find a different permutation p\xe2\x80\xb2p\xe2\x80\xb2 with the same fingerprint. Two permutations pp and p\xe2\x80\xb2p\xe2\x80\xb2 are considered different if there is some index ii such that pi\xe2\x89\xa0p\xe2\x80\xb2ipi\xe2\x89\xa0pi\xe2\x80\xb2.'
b'Input'
b'Each test contains multiple test cases. The first line contains the number of test cases tt (1\xe2\x89\xa4t\xe2\x89\xa46681\xe2\x89\xa4t\xe2\x89\xa4668). Description of the test cases follows.'
b'The first line of each test case contains a single integer nn (2\xe2\x89\xa4n\xe2\x89\xa41002\xe2\x89\xa4n\xe2\x89\xa4100) \xc2\xa0\xe2\x80\x94 the length of the permutation.'
b'The second line of each test case contains nn integers p1,\xe2\x80\xa6,pnp1,\xe2\x80\xa6,pn (1\xe2\x89\xa4pi\xe2\x89\xa4n1\xe2\x89\xa4pi\xe2\x89\xa4n). It is guaranteed that pp is a permutation.'
b'Output'
b'For each test case, output nn integers p\xe2\x80\xb21,\xe2\x80\xa6,p\xe2\x80\xb2np1\xe2\x80\xb2,\xe2\x80\xa6,pn\xe2\x80\xb2 \xe2\x80\x94 a permutation such that p\xe2\x80\xb2\xe2\x89\xa0pp\xe2\x80\xb2\xe2\x89\xa0p and F(p\xe2\x80\xb2)=F(p)F(p\xe2\x80\xb2)=F(p).'
b'We can prove that for every permutation satisfying the input constraints, a solution exists.'
b'If there are multiple solutions, you may output any.'
Tags
constructive algorithms, *800
