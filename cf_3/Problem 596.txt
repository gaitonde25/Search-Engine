b'You are given a sequence aa of length nn consisting of 00s and 11s.'
b'You can perform the following operation on this sequence: '
b'  Pick an index ii from 11 to n\xe2\x88\x922n\xe2\x88\x922 (inclusive).  Change all of aiai, ai+1ai+1, ai+2ai+2 to ai\xe2\x8a\x95ai+1\xe2\x8a\x95ai+2ai\xe2\x8a\x95ai+1\xe2\x8a\x95ai+2 simultaneously, where \xe2\x8a\x95\xe2\x8a\x95 denotes the bitwise XOR operation '
b' Find a sequence of '
b'at most'
b' '
b''
b'nn'
b'n'
b' operations that changes all elements of '
b''
b'aa'
b'a'
b' to '
b''
b'00'
b'0'
b"s or report that it's impossible."
b'We can prove that if there exists a sequence of operations of any length that changes all elements of aa to 00s, then there is also such a sequence of length not greater than nn.'
b'Input'
b'Each test contains multiple test cases. The first line contains the number of test cases tt (1\xe2\x89\xa4t\xe2\x89\xa41041\xe2\x89\xa4t\xe2\x89\xa4104).'
b'The first line of each test case contains a single integer nn (3\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x851053\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105) \xe2\x80\x94 the length of aa.'
b'The second line of each test case contains nn integers a1,a2,\xe2\x80\xa6,ana1,a2,\xe2\x80\xa6,an (ai=0ai=0 or ai=1ai=1) \xe2\x80\x94 elements of aa.'
b'It is guaranteed that the sum of nn over all test cases does not exceed 2\xe2\x8b\x851052\xe2\x8b\x85105.'
b'Output'
b'For each test case, do the following: '
b'  if there is no way of making all the elements of aa equal to 00 after performing the above operation some number of times, print "NO".  otherwise, in the first line print "YES", in the second line print kk (0\xe2\x89\xa4k\xe2\x89\xa4n0\xe2\x89\xa4k\xe2\x89\xa4n) \xe2\x80\x94 the number of operations that you want to perform on aa, and in the third line print a sequence b1,b2,\xe2\x80\xa6,bkb1,b2,\xe2\x80\xa6,bk (1\xe2\x89\xa4bi\xe2\x89\xa4n\xe2\x88\x9221\xe2\x89\xa4bi\xe2\x89\xa4n\xe2\x88\x922) \xe2\x80\x94 the indices on which the operation should be applied. '
b'If there are multiple solutions, you may print any.'
Tags
brute force, constructive algorithms, greedy, two pointers, *2500
