b'You are given a directed graph consisting of nn vertices. Each directed edge (or arc) labeled with a single character. Initially, the graph is empty.'
b'You should process mm queries with it. Each query is one of three types: '
b'  "++ uu vv cc"\xc2\xa0\xe2\x80\x94 add arc from uu to vv with label cc. It\'s guaranteed that there is no arc (u,v)(u,v) in the graph at this moment;  "\xe2\x88\x92\xe2\x88\x92 uu vv"\xc2\xa0\xe2\x80\x94 erase arc from uu to vv. It\'s guaranteed that the graph contains arc (u,v)(u,v) at this moment;  "?? kk"\xc2\xa0\xe2\x80\x94 find the sequence of kk vertices v1,v2,\xe2\x80\xa6,vkv1,v2,\xe2\x80\xa6,vk such that there exist both routes v1\xe2\x86\x92v2\xe2\x86\x92\xe2\x8b\xaf\xe2\x86\x92vkv1\xe2\x86\x92v2\xe2\x86\x92\xe2\x8b\xaf\xe2\x86\x92vk and vk\xe2\x86\x92vk\xe2\x88\x921\xe2\x86\x92\xe2\x8b\xaf\xe2\x86\x92v1vk\xe2\x86\x92vk\xe2\x88\x921\xe2\x86\x92\xe2\x8b\xaf\xe2\x86\x92v1 and if you write down characters along both routes you\'ll get the same string. You can visit the same vertices any number of times. '
b'Input'
b'The first line contains two integers nn and mm (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x851052\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105; 1\xe2\x89\xa4m\xe2\x89\xa42\xe2\x8b\x851051\xe2\x89\xa4m\xe2\x89\xa42\xe2\x8b\x85105)\xc2\xa0\xe2\x80\x94 the number of vertices in the graph and the number of queries.'
b'The next mm lines contain queries\xc2\xa0\xe2\x80\x94 one per line. Each query is one of three types: '
b'  "++ uu vv cc" (1\xe2\x89\xa4u,v\xe2\x89\xa4n1\xe2\x89\xa4u,v\xe2\x89\xa4n; u\xe2\x89\xa0vu\xe2\x89\xa0v; cc is a lowercase Latin letter);  "\xe2\x88\x92\xe2\x88\x92 uu vv" (1\xe2\x89\xa4u,v\xe2\x89\xa4n1\xe2\x89\xa4u,v\xe2\x89\xa4n; u\xe2\x89\xa0vu\xe2\x89\xa0v);  "?? kk" (2\xe2\x89\xa4k\xe2\x89\xa41052\xe2\x89\xa4k\xe2\x89\xa4105). '
b"It's guaranteed that you don't add multiple edges and erase only existing edges. Also, there is at least one query of the third type."
b'Output'
b'For each query of the third type, print YES if there exist the sequence v1,v2,\xe2\x80\xa6,vkv1,v2,\xe2\x80\xa6,vk described above, or NO otherwise.'
Tags
constructive algorithms, data structures, graphs, hashing, *2400
