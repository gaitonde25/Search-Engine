b'Ivan has nn songs on his phone. The size of the ii-th song is aiai bytes. Ivan also has a flash drive which can hold at most mm bytes in total. Initially, his flash drive is empty.'
b'Ivan wants to copy all nn songs to the flash drive. He can compress the songs. If he compresses the ii-th song, the size of the ii-th song reduces from aiai to bibi bytes (bi<aibi<ai).'
b'Ivan can compress any subset of the songs (possibly empty) and copy all the songs to his flash drive if the sum of their sizes is at most mm. He can compress any subset of the songs (not necessarily contiguous).'
b'Ivan wants to find the minimum number of songs he needs to compress in such a way that all his songs fit on the drive (i.e. the sum of their sizes is less than or equal to mm).'
b'If it is impossible to copy all the songs (even if Ivan compresses all the songs), print "-1". Otherwise print the minimum number of songs Ivan needs to compress.'
b'Input'
b"The first line of the input contains two integers nn and mm (1\xe2\x89\xa4n\xe2\x89\xa4105,1\xe2\x89\xa4m\xe2\x89\xa41091\xe2\x89\xa4n\xe2\x89\xa4105,1\xe2\x89\xa4m\xe2\x89\xa4109) \xe2\x80\x94 the number of the songs on Ivan's phone and the capacity of Ivan's flash drive."
b'The next nn lines contain two integers each: the ii-th line contains two integers aiai and bibi (1\xe2\x89\xa4ai,bi\xe2\x89\xa41091\xe2\x89\xa4ai,bi\xe2\x89\xa4109, ai>biai>bi) \xe2\x80\x94 the initial size of the ii-th song and the size of the ii-th song after compression.'
b'Output'
b'If it is impossible to compress a subset of the songs in such a way that all songs fit on the flash drive, print "-1". Otherwise print the minimum number of the songs to compress.'
Tags
sortings, *1100
