b'You have a permutation: an array a=[a1,a2,\xe2\x80\xa6,an]a=[a1,a2,\xe2\x80\xa6,an] of distinct integers from 11 to nn. The length of the permutation nn is odd.'
b'You need to sort the permutation in increasing order.'
b'In one step, you can choose any prefix of the permutation with an odd length and reverse it. Formally, if a=[a1,a2,\xe2\x80\xa6,an]a=[a1,a2,\xe2\x80\xa6,an], you can choose any odd integer pp between 11 and nn, inclusive, and set aa to [ap,ap\xe2\x88\x921,\xe2\x80\xa6,a1,ap+1,ap+2,\xe2\x80\xa6,an][ap,ap\xe2\x88\x921,\xe2\x80\xa6,a1,ap+1,ap+2,\xe2\x80\xa6,an].'
b"Find a way to sort aa using no more than 5n25n2 reversals of the above kind, or determine that such a way doesn't exist. The number of reversals doesn't have to be minimized."
b'Input'
b'Each test contains multiple test cases. The first line contains the number of test cases tt (1\xe2\x89\xa4t\xe2\x89\xa41001\xe2\x89\xa4t\xe2\x89\xa4100). Description of the test cases follows.'
b'The first line of each test case contains a single integer nn (3\xe2\x89\xa4n\xe2\x89\xa420213\xe2\x89\xa4n\xe2\x89\xa42021; nn is odd)\xc2\xa0\xe2\x80\x94 the length of the permutation.'
b'The second line contains nn distinct integers a1,a2,\xe2\x80\xa6,ana1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n1\xe2\x89\xa4ai\xe2\x89\xa4n)\xc2\xa0\xe2\x80\x94 the permutation itself. '
b'It is guaranteed that the sum of nn over all test cases does not exceed 20212021.'
b'Output'
b"For each test case, if it's impossible to sort the given permutation in at most 5n25n2 reversals, print a single integer \xe2\x88\x921\xe2\x88\x921."
b'Otherwise, print an integer mm (0\xe2\x89\xa4m\xe2\x89\xa45n20\xe2\x89\xa4m\xe2\x89\xa45n2), denoting the number of reversals in your sequence of steps, followed by mm integers pipi (1\xe2\x89\xa4pi\xe2\x89\xa4n1\xe2\x89\xa4pi\xe2\x89\xa4n; pipi is odd), denoting the lengths of the prefixes of aa to be reversed, in chronological order.'
b"Note that mm doesn't have to be minimized. If there are multiple answers, print any."
Tags
constructive algorithms, greedy, *2000
