b'You are given a program you want to execute as a set of tasks organized in a dependency graph. The dependency graph is a directed acyclic graph: each task can depend on results of one or several other tasks, and there are no directed circular dependencies between tasks. A task can only be executed if all tasks it depends on have already completed.'
b'Some of the tasks in the graph can only be executed on a coprocessor, and the rest can only be executed on the main processor. In one coprocessor call you can send it a set of tasks which can only be executed on it. For each task of the set, all tasks on which it depends must be either already completed or be included in the set. The main processor starts the program execution and gets the results of tasks executed on the coprocessor automatically.'
b'Find the minimal number of coprocessor calls which are necessary to execute the given program.'
b'Input'
b'The first line contains two space-separated integers N (1\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89N\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89105) \xe2\x80\x94 the total number of tasks given, and M (0\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89M\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89105) \xe2\x80\x94 the total number of dependencies between tasks.'
b'The next line contains N space-separated integers . If Ei\xe2\x80\x89=\xe2\x80\x890, task i can only be executed on the main processor, otherwise it can only be executed on the coprocessor.'
b'The next M lines describe the dependencies between tasks. Each line contains two space-separated integers T1 and T2 and means that task T1 depends on task T2 (T1\xe2\x80\x89\xe2\x89\xa0\xe2\x80\x89T2). Tasks are indexed from 0 to N\xe2\x80\x89-\xe2\x80\x891. All M pairs (T1,\xe2\x80\x89T2) are distinct. It is guaranteed that there are no circular dependencies between tasks.'
b'Output'
b'Output one line containing an integer \xe2\x80\x94 the minimal number of coprocessor calls necessary to execute the program.'
Tags
dfs and similar, dp, graphs, greedy, *1900
