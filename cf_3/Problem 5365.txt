b'In this task you need to process a set of stock exchange orders and use them to create order book.'
b'An order is an instruction of some participant to buy or sell stocks on stock exchange. The order number i has price pi, direction di \xe2\x80\x94 buy or sell, and integer qi. This means that the participant is ready to buy or sell qi stocks at price pi for one stock. A value qi is also known as a volume of an order.'
b'All orders with the same price p and direction d are merged into one aggregated order with price p and direction d. The volume of such order is a sum of volumes of the initial orders.'
b'An order book is a list of aggregated orders, the first part of which contains sell orders sorted by price in descending order, the second contains buy orders also sorted by price in descending order.'
b'An order book of depth s contains s best aggregated orders for each direction. A buy order is better if it has higher price and a sell order is better if it has lower price. If there are less than s aggregated orders for some direction then all of them will be in the final order book.'
b'You are given n stock exhange orders. Your task is to print order book of depth s for these orders.'
b'Input'
b'The input starts with two positive integers n and s (1\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89n\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x891000,\xe2\x80\x891\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89s\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x8950), the number of orders and the book depth.'
b"Next n lines contains a letter di (either 'B' or 'S'), an integer pi (0\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89pi\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89105) and an integer qi (1\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89qi\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89104) \xe2\x80\x94 direction, price and volume respectively. The letter 'B' means buy, 'S' means sell. The price of any sell order is higher than the price of any buy order."
b'Output'
b'Print no more than 2s lines with aggregated orders from order book of depth s. The output format for orders should be the same as in input.'
Tags
data structures, greedy, implementation, sortings, *1300
