b"This is an interactive problem. Don't forget to flush output after printing queries using cout.flush() or fflush(stdout) in C++ or similar functions in other programming languages."
b"There are nn gift boxes in a row, numbered from 11 to nn from left to right. It's known that exactly kk of them contain valuable gifts\xc2\xa0\xe2\x80\x94 other boxes contain just lucky stones. All boxes look the same and differ only in weight. All boxes with stones have the same weight and are strictly heavier than boxes with valuable items. But valuable gifts may be different, so the boxes with valuable items may have different weights."
b"You can ask no more than 5050 queries (printing an answer doesn't count). By each query you can compare total weights of two non-intersecting subsets of boxes a1,a2,\xe2\x80\xa6,akaa1,a2,\xe2\x80\xa6,aka and b1,b2,\xe2\x80\xa6,bkbb1,b2,\xe2\x80\xa6,bkb. In return you'll get one of four results:"
b'  FIRST, if subset a1,a2,\xe2\x80\xa6,akaa1,a2,\xe2\x80\xa6,aka is strictly heavier;  SECOND, if subset b1,b2,\xe2\x80\xa6,bkbb1,b2,\xe2\x80\xa6,bkb is strictly heavier;  EQUAL, if subsets have equal total weights;  WASTED, if the query is incorrect or the limit of queries is exceeded. '
b'Using such queries (or, maybe, intuition) find the box with a valuable gift with the minimum index.'
b'Input'
b'The input consists of several cases. In the beginning, you receive the integer TT (1\xe2\x89\xa4T\xe2\x89\xa45001\xe2\x89\xa4T\xe2\x89\xa4500)\xc2\xa0\xe2\x80\x94 the number of test cases.'
b'At the beginning of each test case, you receive two integers nn and kk (2\xe2\x89\xa4n\xe2\x89\xa410002\xe2\x89\xa4n\xe2\x89\xa41000, 1\xe2\x89\xa4k\xe2\x89\xa4n21\xe2\x89\xa4k\xe2\x89\xa4n2)\xc2\xa0\xe2\x80\x94 the number of boxes in a row and the number of boxes with valuable gifts.'
b"It's guaranteed that the order of boxes is fixed beforehand and that the sum of nn in one test doesn't exceed 10001000."
b'Output'
b'For each test case print the minimum index among all boxes with a valuable gift in the following format: "! xx" where xx (1\xe2\x89\xa4x\xe2\x89\xa4n1\xe2\x89\xa4x\xe2\x89\xa4n)\xc2\xa0\xe2\x80\x94 the index of the box.'
Tags
binary search, interactive, probabilities, *2600
