b'You are given strings SS and TT, consisting of lowercase English letters. It is guaranteed that TT is a permutation of the string abc. '
b'Find string S\xe2\x80\xb2S\xe2\x80\xb2, the lexicographically smallest permutation of SS such that TT is not a subsequence of S\xe2\x80\xb2S\xe2\x80\xb2.'
b'String aa is a permutation of string bb if the number of occurrences of each distinct character is the same in both strings.'
b'A string aa is a subsequence of a string bb if aa can be obtained from bb by deletion of several (possibly, zero or all) elements.'
b'A string aa is lexicographically smaller than a string bb if and only if one of the following holds:'
b' aa is a prefix of bb, but a\xe2\x89\xa0ba\xe2\x89\xa0b; in the first position where aa and bb differ, the string aa has a letter that appears earlier in the alphabet than the corresponding letter in bb.'
b'Input'
b'Each test contains multiple test cases. The first line contains a single integer tt (1\xe2\x89\xa4t\xe2\x89\xa410001\xe2\x89\xa4t\xe2\x89\xa41000)\xc2\xa0\xe2\x80\x94 the number of test cases. Description of the test cases follows.'
b'The first line of each test case contains a string SS (1\xe2\x89\xa4|S|\xe2\x89\xa41001\xe2\x89\xa4|S|\xe2\x89\xa4100), consisting of lowercase English letters.'
b'The second line of each test case contains a string TT that is a permutation of the string abc. (Hence, |T|=3|T|=3).'
b'Note that there is no limit on the sum of |S||S| across all test cases.'
b'Output'
b'For each test case, output a single string S\xe2\x80\xb2S\xe2\x80\xb2, the lexicographically smallest permutation of SS such that TT is not a subsequence of S\xe2\x80\xb2S\xe2\x80\xb2.'
Tags
constructive algorithms, greedy, sortings, strings, *800
