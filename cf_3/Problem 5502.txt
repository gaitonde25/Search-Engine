b'In Berland a bus travels along the main street of the capital. The street begins from the main square and looks like a very long segment. There are n bus stops located along the street, the i-th of them is located at the distance ai from the central square, all distances are distinct, the stops are numbered in the order of increasing distance from the square, that is, ai\xe2\x80\x89<\xe2\x80\x89ai\xe2\x80\x89+\xe2\x80\x891 for all i from 1 to n\xe2\x80\x89-\xe2\x80\x891. The bus starts its journey from the first stop, it passes stops 2, 3 and so on. It reaches the stop number n, turns around and goes in the opposite direction to stop 1, passing all the intermediate stops in the reverse order. After that, it again starts to move towards stop n. During the day, the bus runs non-stop on this route.'
b'The bus is equipped with the Berland local positioning system. When the bus passes a stop, the system notes down its number.'
b'One of the key features of the system is that it can respond to the queries about the distance covered by the bus for the parts of its path between some pair of stops. A special module of the system takes the input with the information about a set of stops on a segment of the path, a stop number occurs in the set as many times as the bus drove past it. This module returns the length of the traveled segment of the path (or -1 if it is impossible to determine the length uniquely). The operation of the module is complicated by the fact that stop numbers occur in the request not in the order they were visited but in the non-decreasing order.'
b'For example, if the number of stops is 6, and the part of the bus path starts at the bus stop number 5, ends at the stop number 3 and passes the stops as follows: , then the request about this segment of the path will have form: 3,\xe2\x80\x894,\xe2\x80\x895,\xe2\x80\x895,\xe2\x80\x896. If the bus on the segment of the path from stop 5 to stop 3 has time to drive past the 1-th stop (i.e., if we consider a segment that ends with the second visit to stop 3 on the way from 5), then the request will have form: 1,\xe2\x80\x892,\xe2\x80\x892,\xe2\x80\x893,\xe2\x80\x893,\xe2\x80\x894,\xe2\x80\x895,\xe2\x80\x895,\xe2\x80\x896.'
b'You will have to repeat the Berland programmers achievement and implement this function.'
b'Input'
b'The first line contains integer n (2\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89n\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x892\xc2\xb7105) \xe2\x80\x94 the number of stops.'
b'The second line contains n integers (1\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89ai\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89109) \xe2\x80\x94 the distance from the i-th stop to the central square. The numbers in the second line go in the increasing order.'
b'The third line contains integer m (1\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89m\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x894\xc2\xb7105) \xe2\x80\x94 the number of stops the bus visited on some segment of the path.'
b'The fourth line contains m integers (1\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89bi\xe2\x80\x89\xe2\x89\xa4\xe2\x80\x89n) \xe2\x80\x94 the sorted list of numbers of the stops visited by the bus on the segment of the path. The number of a stop occurs as many times as it was visited by a bus.'
b'It is guaranteed that the query corresponds to some segment of the path.'
b'Output'
b'In the single line please print the distance covered by a bus. If it is impossible to determine it unambiguously, print \xe2\x80\x89-\xe2\x80\x891.'
Tags
constructive algorithms, greedy, hashing, implementation, *2400
