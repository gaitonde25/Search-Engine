b'A bracket sequence is a string containing only characters "(" and ")". A regular bracket sequence (or, shortly, an RBS) is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters "1" and "+" between the original characters of the sequence. For example:'
b'  bracket sequences "()()" and "(())" are regular (the resulting expressions are: "(1)+(1)" and "((1+1)+1)");  bracket sequences ")(", "(" and ")" are not. '
b'You are given a string ss, which is an RBS. You can apply any number of operations to this string. Each operation can have one of the following types:'
b'  choose some non-empty prefix of ss and remove it from ss, so ss is still an RBS. For example, we can apply this operation as follows: "(())()(())()()" \xe2\x86\x92\xe2\x86\x92 "()()" (the first 1010 characters are removed);  choose some contiguous non-empty substring of ss and remove it from ss, so ss is still an RBS. For example, we can apply this operation as follows: "(())()(())()()" \xe2\x86\x92\xe2\x86\x92 "(())()()()" (the characters from the 77-th to the 1010-th are removed). '
b'The operation 22 can be applied at most kk times. Calculate the maximum number of operations you can apply until ss becomes empty.'
b'Input'
b'The first line contains one integer tt (1\xe2\x89\xa4t\xe2\x89\xa41051\xe2\x89\xa4t\xe2\x89\xa4105) \xe2\x80\x94 the number of test cases.'
b'Each test case is described by two lines. The first line contains two integers nn and kk (2\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x851052\xe2\x89\xa4n\xe2\x89\xa42\xe2\x8b\x85105; 1\xe2\x89\xa4k\xe2\x89\xa4n1\xe2\x89\xa4k\xe2\x89\xa4n; nn is even) \xe2\x80\x94 the length of ss and the maximum number of operations of type 22 you can apply.'
b"The second line contains a string ss of nn characters '(' and ')'. This string is an RBS."
b"The sum of nn over all test cases doesn't exceed 2\xe2\x8b\x851052\xe2\x8b\x85105."
b'Output'
b'For each test case, print one integer \xe2\x80\x94 the maximum number of operations you can apply.'
Tags
*special problem, greedy, *1800
