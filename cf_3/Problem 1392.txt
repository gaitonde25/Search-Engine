b'This is the hard version of the problem. The difference between the versions is that the easy version has no swap operations. You can make hacks only if all versions of the problem are solved.'
b'Pikachu is a cute and friendly pok\xc3\xa9mon living in the wild pikachu herd.'
b'But it has become known recently that infamous team R wanted to steal all these pok\xc3\xa9mon! Pok\xc3\xa9mon trainer Andrew decided to help Pikachu to build a pok\xc3\xa9mon army to resist.'
b'First, Andrew counted all the pok\xc3\xa9mon\xc2\xa0\xe2\x80\x94 there were exactly nn pikachu. The strength of the ii-th pok\xc3\xa9mon is equal to aiai, and all these numbers are distinct.'
b'As an army, Andrew can choose any non-empty subsequence of pokemons. In other words, Andrew chooses some array bb from kk indices such that 1\xe2\x89\xa4b1<b2<\xe2\x8b\xaf<bk\xe2\x89\xa4n1\xe2\x89\xa4b1<b2<\xe2\x8b\xaf<bk\xe2\x89\xa4n, and his army will consist of pok\xc3\xa9mons with forces ab1,ab2,\xe2\x80\xa6,abkab1,ab2,\xe2\x80\xa6,abk.'
b'The strength of the army is equal to the alternating sum of elements of the subsequence; that is, ab1\xe2\x88\x92ab2+ab3\xe2\x88\x92ab4+\xe2\x80\xa6ab1\xe2\x88\x92ab2+ab3\xe2\x88\x92ab4+\xe2\x80\xa6.'
b'Andrew is experimenting with pok\xc3\xa9mon order. He performs qq operations. In ii-th operation Andrew swaps lili-th and riri-th pok\xc3\xa9mon.'
b'Andrew wants to know the maximal stregth of the army he can achieve with the initial pok\xc3\xa9mon placement. He also needs to know the maximal strength after each operation.'
b'Help Andrew and the pok\xc3\xa9mon, or team R will realize their tricky plan!'
b'Input'
b'Each test contains multiple test cases.'
b'The first line contains one positive integer tt (1\xe2\x89\xa4t\xe2\x89\xa41031\xe2\x89\xa4t\xe2\x89\xa4103) denoting the number of test cases. Description of the test cases follows.'
b'The first line of each test case contains two integers nn and qq (1\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x85105,0\xe2\x89\xa4q\xe2\x89\xa43\xe2\x8b\x851051\xe2\x89\xa4n\xe2\x89\xa43\xe2\x8b\x85105,0\xe2\x89\xa4q\xe2\x89\xa43\xe2\x8b\x85105) denoting the number of pok\xc3\xa9mon and number of operations respectively.'
b'The second line contains nn distinct positive integers a1,a2,\xe2\x80\xa6,ana1,a2,\xe2\x80\xa6,an (1\xe2\x89\xa4ai\xe2\x89\xa4n1\xe2\x89\xa4ai\xe2\x89\xa4n) denoting the strengths of the pok\xc3\xa9mon.'
b'ii-th of the last qq lines contains two positive integers lili and riri (1\xe2\x89\xa4li\xe2\x89\xa4ri\xe2\x89\xa4n1\xe2\x89\xa4li\xe2\x89\xa4ri\xe2\x89\xa4n) denoting the indices of pok\xc3\xa9mon that were swapped in the ii-th operation.'
b'It is guaranteed that the sum of nn over all test cases does not exceed 3\xe2\x8b\x851053\xe2\x8b\x85105, and the sum of qq over all test cases does not exceed 3\xe2\x8b\x851053\xe2\x8b\x85105. '
b'Output'
b'For each test case, print q+1q+1 integers: the maximal strength of army before the swaps and after each swap.'
Tags
data structures, divide and conquer, dp, greedy, implementation, *2100
